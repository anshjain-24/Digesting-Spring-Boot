
@Transactional : 


Why we need : 

In some cases, we as programmer want certain things to be taken placed as whole or
else that should not be taken place at all.
In DBMS, There are some properties called "ACID" properties. in that A stands for atomicity, 
that means , any transaction in DB should be either done 100% or else 0%.


let's take an example ,

1	 public void saveJournalEntry(Journal journal,String username){
2       	 journal.setDate(LocalDate.now());
3        	 Journal journal1 = journalRepo.save(journal);
4	         User user = userService.findByUserName(username);
5       	 user.getJournals().add(journal1);
6  	         userService.saveUser(user);
7        	 return;
8    	 }


here in this method, 
what if any exception occur just before line no. 5
then what will happen ?   journal would be saved in "journal" collection but 
			  in "user" collection, in the list of journal of that user, it will not be added,
			inconsistency would be there.

We need to do something so that whole method run as a single operation, or else it should not work at all

@Transactional Annotation : 

for this we should simply add @Transactional Annotation above method, it will do execute that whole method as single expression.


-----------------------------------------------------------------------------------------------------------------


Before using @Transactional annotation, we need to add one more annotation above the main class of our project. 
It is @EnableTransactionManagement

@EnableTransactionManagement : 


What this annotation do is, it tells spring to scan all those methods while have @Transactional Annotation above them.
Spring will create Transactional context with respect to all those methods. which simply means that it will create a container, inside that container spring will add all DB related instructions and will run it as a whole.


This only facilitate Atomicity, but it also ensure Isolation property.

suppose, there are 2 requests at a same time, and this method is to be execute in parallel, then spring will create two instances of the container.


-----------------------------------------------------------------------------------------------------------------


Who Actually does all these things : 

There is an interface called "PlatformTransactionManagement".

Implementation class of this interface is MongoTransactionalManagement for MongoDB

Inside this class, there are multiple methods like commitTransaction(), abortTransaction(), closeSession() etc.


Actually we need to provide bean of this interface, through that bean spring will be able to handle/implement the transections. 

for that we can simple write one method in out base class, annotated with @Bean (to specify that this is to provide a bean (object) ). 
( @Bean is optional, spring is smart enough to understand that)

we can add this method in another class too, but then we will have to annotate that class with @Configuration.
then only spring will understand that there is a class and there might be some methods which are needed to be executed.

add the method like this to provide the bean : 

Name of the method can be anything, it does not matter at all.


We need one onbject of "MongoDatabaseFactory" Interface, 
the is the interface which includes all the methods which are actually required to connect with mongo database 
and work all the things related to mongo database. ( like to getMongoDatabase(), getSession() etc. ) 


-----------------------------------------------------------------------------------------------------------------
@Bean
public PlatformTransactionManagement falaana ( MongoDatabaseFactory dbFactory ) {

	return new MongoTransactionalManagement ( dbFactory ) ;

}
-----------------------------------------------------------------------------------------------------------------


You may encounter an error which says 
Illegal Operation : "Transaction numbers are only allowed on a replica set member or mongos"

in simple terms, it says that, out mongoDB (which is running locally) has only one instance running in our machine,
There is no replication right now.
In MongoDB, Replication is mandatory for transection to happen. 

(we can of course, do replication of mongoDB locally, but here in this project (journal-app) we will use MongoDB Atlas, 
we will store data on AWS, the instance of our DB would be on AWS)




